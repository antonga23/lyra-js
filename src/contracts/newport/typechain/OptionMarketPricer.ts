/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace OptionMarketPricer {
  export type PricingParametersStruct = {
    optionPriceFeeCoefficient: PromiseOrValue<BigNumberish>;
    optionPriceFee1xPoint: PromiseOrValue<BigNumberish>;
    optionPriceFee2xPoint: PromiseOrValue<BigNumberish>;
    spotPriceFeeCoefficient: PromiseOrValue<BigNumberish>;
    spotPriceFee1xPoint: PromiseOrValue<BigNumberish>;
    spotPriceFee2xPoint: PromiseOrValue<BigNumberish>;
    vegaFeeCoefficient: PromiseOrValue<BigNumberish>;
    standardSize: PromiseOrValue<BigNumberish>;
    skewAdjustmentFactor: PromiseOrValue<BigNumberish>;
  };

  export type PricingParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    optionPriceFeeCoefficient: BigNumber;
    optionPriceFee1xPoint: BigNumber;
    optionPriceFee2xPoint: BigNumber;
    spotPriceFeeCoefficient: BigNumber;
    spotPriceFee1xPoint: BigNumber;
    spotPriceFee2xPoint: BigNumber;
    vegaFeeCoefficient: BigNumber;
    standardSize: BigNumber;
    skewAdjustmentFactor: BigNumber;
  };

  export type TradeLimitParametersStruct = {
    minDelta: PromiseOrValue<BigNumberish>;
    minForceCloseDelta: PromiseOrValue<BigNumberish>;
    tradingCutoff: PromiseOrValue<BigNumberish>;
    minBaseIV: PromiseOrValue<BigNumberish>;
    maxBaseIV: PromiseOrValue<BigNumberish>;
    minSkew: PromiseOrValue<BigNumberish>;
    maxSkew: PromiseOrValue<BigNumberish>;
    minVol: PromiseOrValue<BigNumberish>;
    maxVol: PromiseOrValue<BigNumberish>;
    absMinSkew: PromiseOrValue<BigNumberish>;
    absMaxSkew: PromiseOrValue<BigNumberish>;
    capSkewsToAbs: PromiseOrValue<boolean>;
  };

  export type TradeLimitParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    minDelta: BigNumber;
    minForceCloseDelta: BigNumber;
    tradingCutoff: BigNumber;
    minBaseIV: BigNumber;
    maxBaseIV: BigNumber;
    minSkew: BigNumber;
    maxSkew: BigNumber;
    minVol: BigNumber;
    maxVol: BigNumber;
    absMinSkew: BigNumber;
    absMaxSkew: BigNumber;
    capSkewsToAbs: boolean;
  };

  export type VarianceFeeParametersStruct = {
    defaultVarianceFeeCoefficient: PromiseOrValue<BigNumberish>;
    forceCloseVarianceFeeCoefficient: PromiseOrValue<BigNumberish>;
    skewAdjustmentCoefficient: PromiseOrValue<BigNumberish>;
    referenceSkew: PromiseOrValue<BigNumberish>;
    minimumStaticSkewAdjustment: PromiseOrValue<BigNumberish>;
    vegaCoefficient: PromiseOrValue<BigNumberish>;
    minimumStaticVega: PromiseOrValue<BigNumberish>;
    ivVarianceCoefficient: PromiseOrValue<BigNumberish>;
    minimumStaticIvVariance: PromiseOrValue<BigNumberish>;
  };

  export type VarianceFeeParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    defaultVarianceFeeCoefficient: BigNumber;
    forceCloseVarianceFeeCoefficient: BigNumber;
    skewAdjustmentCoefficient: BigNumber;
    referenceSkew: BigNumber;
    minimumStaticSkewAdjustment: BigNumber;
    vegaCoefficient: BigNumber;
    minimumStaticVega: BigNumber;
    ivVarianceCoefficient: BigNumber;
    minimumStaticIvVariance: BigNumber;
  };
}

export interface OptionMarketPricerInterface extends utils.Interface {
  functions: {
    "setPricingParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setTradeLimitParams((int256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "setVarianceFeeParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setPricingParams"
      | "setTradeLimitParams"
      | "setVarianceFeeParams"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setPricingParams",
    values: [OptionMarketPricer.PricingParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeLimitParams",
    values: [OptionMarketPricer.TradeLimitParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setVarianceFeeParams",
    values: [OptionMarketPricer.VarianceFeeParametersStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "setPricingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeLimitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVarianceFeeParams",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OptionMarketPricer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionMarketPricerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setPricingParams(
      _pricingParams: OptionMarketPricer.PricingParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTradeLimitParams(
      _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVarianceFeeParams(
      _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  setPricingParams(
    _pricingParams: OptionMarketPricer.PricingParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTradeLimitParams(
    _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVarianceFeeParams(
    _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setPricingParams(
      _pricingParams: OptionMarketPricer.PricingParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradeLimitParams(
      _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setVarianceFeeParams(
      _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    setPricingParams(
      _pricingParams: OptionMarketPricer.PricingParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTradeLimitParams(
      _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVarianceFeeParams(
      _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setPricingParams(
      _pricingParams: OptionMarketPricer.PricingParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTradeLimitParams(
      _tradeLimitParams: OptionMarketPricer.TradeLimitParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVarianceFeeParams(
      _varianceFeeParams: OptionMarketPricer.VarianceFeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
