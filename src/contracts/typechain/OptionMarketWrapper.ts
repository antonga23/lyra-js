/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace OptionMarketWrapperWithSwaps {
  export type OptionMarketContractsStruct = {
    quoteAsset: string;
    baseAsset: string;
    optionToken: string;
  };

  export type OptionMarketContractsStructOutput = [string, string, string] & {
    quoteAsset: string;
    baseAsset: string;
    optionToken: string;
  };

  export type OptionPositionParamsStruct = {
    optionMarket: string;
    strikeId: BigNumberish;
    positionId: BigNumberish;
    iterations: BigNumberish;
    setCollateralTo: BigNumberish;
    currentCollateral: BigNumberish;
    optionType: BigNumberish;
    amount: BigNumberish;
    minCost: BigNumberish;
    maxCost: BigNumberish;
    inputAmount: BigNumberish;
    inputAsset: string;
  };

  export type OptionPositionParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    optionMarket: string;
    strikeId: BigNumber;
    positionId: BigNumber;
    iterations: BigNumber;
    setCollateralTo: BigNumber;
    currentCollateral: BigNumber;
    optionType: number;
    amount: BigNumber;
    minCost: BigNumber;
    maxCost: BigNumber;
    inputAmount: BigNumber;
    inputAsset: string;
  };

  export type ReturnDetailsStruct = {
    market: string;
    positionId: BigNumberish;
    owner: string;
    amount: BigNumberish;
    totalCost: BigNumberish;
    totalFee: BigNumberish;
    swapFee: BigNumberish;
    token: string;
  };

  export type ReturnDetailsStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    market: string;
    positionId: BigNumber;
    owner: string;
    amount: BigNumber;
    totalCost: BigNumber;
    totalFee: BigNumber;
    swapFee: BigNumber;
    token: string;
  };

  export type StableAssetViewStruct = {
    id: BigNumberish;
    token: string;
    decimals: BigNumberish;
    symbol: string;
    balance: BigNumberish;
    allowance: BigNumberish;
  };

  export type StableAssetViewStructOutput = [
    number,
    string,
    number,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: number;
    token: string;
    decimals: number;
    symbol: string;
    balance: BigNumber;
    allowance: BigNumber;
  };

  export type MarketAssetViewStruct = {
    id: BigNumberish;
    market: string;
    token: string;
    decimals: BigNumberish;
    symbol: string;
    balance: BigNumberish;
    allowance: BigNumberish;
    isApprovedForAll: boolean;
  };

  export type MarketAssetViewStructOutput = [
    number,
    string,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    id: number;
    market: string;
    token: string;
    decimals: number;
    symbol: string;
    balance: BigNumber;
    allowance: BigNumber;
    isApprovedForAll: boolean;
  };
}

export interface OptionMarketWrapperInterface extends utils.Interface {
  contractName: "OptionMarketWrapper";
  functions: {
    "addCurveStable(address,uint8)": FunctionFragment;
    "addLong(uint256)": FunctionFragment;
    "addMarket(address,uint8,(address,address,address))": FunctionFragment;
    "addShort(uint256)": FunctionFragment;
    "closeLong(uint256)": FunctionFragment;
    "closePosition((address,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "closeShort(uint256)": FunctionFragment;
    "curveSwap()": FunctionFragment;
    "ercIds(uint256)": FunctionFragment;
    "forceClosePosition((address,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "getBalancesAndAllowances(address)": FunctionFragment;
    "idToERC(uint8)": FunctionFragment;
    "idToMarket(uint8)": FunctionFragment;
    "marketContracts(address)": FunctionFragment;
    "marketIds(uint256)": FunctionFragment;
    "minReturnPercent()": FunctionFragment;
    "openLong(uint256)": FunctionFragment;
    "openPosition((address,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "openShort(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "reduceLong(uint256)": FunctionFragment;
    "reduceShort(uint256)": FunctionFragment;
    "removeCurveStable(uint8)": FunctionFragment;
    "removeMarket(uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCollateralWrapper(uint8,uint32,uint256)": FunctionFragment;
    "synthetixAdapter()": FunctionFragment;
    "tradingRewards()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateContractParams(address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCurveStable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLong",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarket",
    values: [
      string,
      BigNumberish,
      OptionMarketWrapperWithSwaps.OptionMarketContractsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addShort",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLong",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [OptionMarketWrapperWithSwaps.OptionPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "closeShort",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "curveSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ercIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClosePosition",
    values: [OptionMarketWrapperWithSwaps.OptionPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancesAndAllowances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "idToERC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minReturnPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openLong",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [OptionMarketWrapperWithSwaps.OptionPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "openShort",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reduceLong",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceShort",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCurveStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralWrapper",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "synthetixAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractParams",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCurveStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addLong", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addShort", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeLong", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeShort", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curveSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ercIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancesAndAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToERC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idToMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minReturnPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openLong", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openShort", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reduceLong", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reduceShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCurveStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "synthetixAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractParams",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PositionTraded(bool,bool,address,uint256,address,uint256,uint256,uint256,int256,address)": EventFragment;
    "SetCollateralTo(uint256)": EventFragment;
    "WrapperParamsUpdated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionTraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCollateralTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrapperParamsUpdated"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PositionTradedEvent = TypedEvent<
  [
    boolean,
    boolean,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  {
    isOpen: boolean;
    isLong: boolean;
    market: string;
    positionId: BigNumber;
    owner: string;
    amount: BigNumber;
    totalCost: BigNumber;
    totalFee: BigNumber;
    swapFee: BigNumber;
    token: string;
  }
>;

export type PositionTradedEventFilter = TypedEventFilter<PositionTradedEvent>;

export type SetCollateralToEvent = TypedEvent<
  [BigNumber],
  { newCollateral: BigNumber }
>;

export type SetCollateralToEventFilter = TypedEventFilter<SetCollateralToEvent>;

export type WrapperParamsUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    curveSwap: string;
    synthetixAdapter: string;
    tradingRewards: string;
    minReturnPercent: BigNumber;
  }
>;

export type WrapperParamsUpdatedEventFilter =
  TypedEventFilter<WrapperParamsUpdatedEvent>;

export interface OptionMarketWrapper extends BaseContract {
  contractName: "OptionMarketWrapper";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionMarketWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCurveStable(
      token: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarket(
      optionMarket: string,
      id: BigNumberish,
      _marketContracts: OptionMarketWrapperWithSwaps.OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curveSwap(overrides?: CallOverrides): Promise<[string]>;

    ercIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    forceClosePosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalancesAndAllowances(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        OptionMarketWrapperWithSwaps.StableAssetViewStructOutput[],
        OptionMarketWrapperWithSwaps.MarketAssetViewStructOutput[]
      ]
    >;

    idToERC(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    idToMarket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    marketContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        quoteAsset: string;
        baseAsset: string;
        optionToken: string;
      }
    >;

    marketIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    minReturnPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    openLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reduceLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reduceShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCurveStable(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMarket(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralWrapper(
      market: BigNumberish,
      positionId: BigNumberish,
      setCollateralTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    synthetixAdapter(overrides?: CallOverrides): Promise<[string]>;

    tradingRewards(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateContractParams(
      _curveSwap: string,
      _synthetixAdapter: string,
      _tradingRewards: string,
      _minReturnPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCurveStable(
    token: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLong(
    params: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarket(
    optionMarket: string,
    id: BigNumberish,
    _marketContracts: OptionMarketWrapperWithSwaps.OptionMarketContractsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addShort(
    params: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeLong(
    params: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeShort(
    params: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curveSwap(overrides?: CallOverrides): Promise<string>;

  ercIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  forceClosePosition(
    params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalancesAndAllowances(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [
      OptionMarketWrapperWithSwaps.StableAssetViewStructOutput[],
      OptionMarketWrapperWithSwaps.MarketAssetViewStructOutput[]
    ]
  >;

  idToERC(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  idToMarket(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  marketContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      quoteAsset: string;
      baseAsset: string;
      optionToken: string;
    }
  >;

  marketIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  minReturnPercent(overrides?: CallOverrides): Promise<BigNumber>;

  openLong(
    params: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openShort(
    params: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  reduceLong(
    params: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reduceShort(
    params: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCurveStable(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMarket(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralWrapper(
    market: BigNumberish,
    positionId: BigNumberish,
    setCollateralTo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  synthetixAdapter(overrides?: CallOverrides): Promise<string>;

  tradingRewards(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateContractParams(
    _curveSwap: string,
    _synthetixAdapter: string,
    _tradingRewards: string,
    _minReturnPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCurveStable(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLong(
      params: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addMarket(
      optionMarket: string,
      id: BigNumberish,
      _marketContracts: OptionMarketWrapperWithSwaps.OptionMarketContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addShort(
      params: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeLong(
      params: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<OptionMarketWrapperWithSwaps.ReturnDetailsStructOutput>;

    closeShort(
      params: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curveSwap(overrides?: CallOverrides): Promise<string>;

    ercIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    forceClosePosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<OptionMarketWrapperWithSwaps.ReturnDetailsStructOutput>;

    getBalancesAndAllowances(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        OptionMarketWrapperWithSwaps.StableAssetViewStructOutput[],
        OptionMarketWrapperWithSwaps.MarketAssetViewStructOutput[]
      ]
    >;

    idToERC(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    idToMarket(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    marketContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        quoteAsset: string;
        baseAsset: string;
        optionToken: string;
      }
    >;

    marketIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    minReturnPercent(overrides?: CallOverrides): Promise<BigNumber>;

    openLong(
      params: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<OptionMarketWrapperWithSwaps.ReturnDetailsStructOutput>;

    openShort(
      params: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    reduceLong(
      params: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reduceShort(
      params: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCurveStable(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMarket(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCollateralWrapper(
      market: BigNumberish,
      positionId: BigNumberish,
      setCollateralTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthetixAdapter(overrides?: CallOverrides): Promise<string>;

    tradingRewards(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateContractParams(
      _curveSwap: string,
      _synthetixAdapter: string,
      _tradingRewards: string,
      _minReturnPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PositionTraded(bool,bool,address,uint256,address,uint256,uint256,uint256,int256,address)"(
      isOpen?: null,
      isLong?: null,
      market?: string | null,
      positionId?: BigNumberish | null,
      owner?: string | null,
      amount?: null,
      totalCost?: null,
      totalFee?: null,
      swapFee?: null,
      token?: null
    ): PositionTradedEventFilter;
    PositionTraded(
      isOpen?: null,
      isLong?: null,
      market?: string | null,
      positionId?: BigNumberish | null,
      owner?: string | null,
      amount?: null,
      totalCost?: null,
      totalFee?: null,
      swapFee?: null,
      token?: null
    ): PositionTradedEventFilter;

    "SetCollateralTo(uint256)"(
      newCollateral?: null
    ): SetCollateralToEventFilter;
    SetCollateralTo(newCollateral?: null): SetCollateralToEventFilter;

    "WrapperParamsUpdated(address,address,address,uint256)"(
      curveSwap?: null,
      synthetixAdapter?: null,
      tradingRewards?: null,
      minReturnPercent?: null
    ): WrapperParamsUpdatedEventFilter;
    WrapperParamsUpdated(
      curveSwap?: null,
      synthetixAdapter?: null,
      tradingRewards?: null,
      minReturnPercent?: null
    ): WrapperParamsUpdatedEventFilter;
  };

  estimateGas: {
    addCurveStable(
      token: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarket(
      optionMarket: string,
      id: BigNumberish,
      _marketContracts: OptionMarketWrapperWithSwaps.OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curveSwap(overrides?: CallOverrides): Promise<BigNumber>;

    ercIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    forceClosePosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalancesAndAllowances(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToERC(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    idToMarket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minReturnPercent(overrides?: CallOverrides): Promise<BigNumber>;

    openLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reduceLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reduceShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCurveStable(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMarket(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralWrapper(
      market: BigNumberish,
      positionId: BigNumberish,
      setCollateralTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    synthetixAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    tradingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateContractParams(
      _curveSwap: string,
      _synthetixAdapter: string,
      _tradingRewards: string,
      _minReturnPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCurveStable(
      token: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarket(
      optionMarket: string,
      id: BigNumberish,
      _marketContracts: OptionMarketWrapperWithSwaps.OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curveSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ercIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceClosePosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalancesAndAllowances(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToERC(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToMarket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minReturnPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      params: OptionMarketWrapperWithSwaps.OptionPositionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reduceLong(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reduceShort(
      params: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCurveStable(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMarket(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralWrapper(
      market: BigNumberish,
      positionId: BigNumberish,
      setCollateralTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    synthetixAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateContractParams(
      _curveSwap: string,
      _synthetixAdapter: string,
      _tradingRewards: string,
      _minReturnPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
